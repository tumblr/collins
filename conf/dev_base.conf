include "validations.conf"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="AbFgHx0eJx8lalkja812389uasdlkajsdlka98012398uasdlkasdklajsd81298"
parsers.text.maxLength=1048576
# evolutionplugin should be disabled in a production environment
#evolutionplugin=disabled

# Do not change the crypto key after you have started using it, you will be unable to decrypt data
crypto.key="lkkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdlkajsdla"

collinscript {
  enabled = true
}

features {
  encryptedTags = [ SYSTEM_PASSWORD, LOCATION ]
  noLogPurges = []
}

graph {
  enabled = true
  FibrGraphs {
    customMetrics {
      mysqlHosts {
        selector = "PRIMARY_ROLE = \"DATABASE\""
        metrics = [
          MYSQL/COMMANDS,
          MYSQL/SLOW,
          MYSQL/THREADS,
          MYSQL/NET
        ]
      }

      memcacheHosts {
        selector = "POOL = MEMCACHE*"
        metrics = [
          MEMCACHE/COMMANDS,
          MEMCACHE/EVICTS,
          MEMCACHE/ITEMS,
          MEMCACHE/HITRATIO
        ]
      }
    }
  }
}

multicollins {
  enabled=true
  thisInstance = "localhost"
}

nodeclassifier.sortKeys = [SL_RACK_POSITION, SL_RACK] #ordered from least significant to most

powerconfiguration.unitsRequired=2

callbacks.registry {
  nowProvisioned {
    on = "asset_update"

    when {
      previous.state = "isProvisioning"
      current.state = "isProvisioned"
    }

    action {
      type = exec
      command = "echo <tag>"
    }
  }

  onCreate {
    on = "asset_create"

    action {
      type = exec
      command = [
        printf,
        "onCreate - %s - %s\\n",
        "<tag>",
        "<getStatusName>"
      ]
    }
  }

  hardwareProblem {
    on = "asset_update"
    when {
      previous.state = "!isMaintenance"
      current.state = "isMaintenance"
      current.states = [
        IPMI_PROBLEM,
        HARDWARE_PROBLEM,
        HARDWARE_UPGRADE
      ]
    }
    action {
      type = exec
      command = [
        printf,
        "hardwareProblem - %s\\n",
        "<tag>"
      ]
    }
  }
}

softlayer.allowedCancelStatus=[Unallocated, Allocated, Maintenance]

searchresults {

  defaultTagOrder = [
    "TAG",
    "HOSTNAME",
    "PRIMARY_ROLE",
    "STATUS",
    "CREATED",
    "UPDATED",
    "SL_LINK"
  ]

  rowClassAction = {
    type=script
    command=[
      "collins.script.SearchResults.getRowClassForAsset"
    ]
  }

}


tagdecorators {
  templates {
    search = "<a href=\"/resources?{name}={value}\">{value}</a>"
  }
  decorators {
    STATS_LINKS {
      decorator="<a target=\"_blank\" href=\"{value}\">{i.label}</a>"
      valueParser="util.views.DelimiterParser"
      delimiter=" "
      between=" - "
      0.label="Thrift"
      1.label="HTTP"
    }
    TUMBLR_SHA.decorator="<a target=\"_blank\" href=\"https://github.com/tumblr/tumblr/commit/{value}\">{value}</a>"
    CONFIG_SHA.decorator="<a target=\"_blank\" href=\"https://github.com/tumblr/config/commit/{value}\">{value}</a>"
    POOL.decorator = ${tagdecorators.templates.search}
    SECONDARY_ROLE.decorator = ${tagdecorators.templates.search}
    POWER_PORT.decorator = ${tagdecorators.templates.search}
    RACK_POSITION {
      decorator = ${tagdecorators.templates.search}
      valueParser = "util.views.DelimiterParser"
      delimiter = "-"
      between = "-"
    }
    SL_ROOM.decorator=${tagdecorators.templates.search}
    SL_RACK.decorator=${tagdecorators.templates.search}
    SL_RACK_POSITION.decorator=${tagdecorators.templates.search}
    HOSTNAME {
      default="<em>None</em>"
      header="Hostname"
      showIfAction {
        type=script
        command=[
          "collins.script.ShowIf.showHostname"
        ]
      }
      decoratorAction {
        type=script
        command=[
          "collins.script.TagDecorators.decorateHostname"
        ]
      }
      formatterAction {
        type=script
        command=[
          "collins.script.Formatters.ellipsis"
        ]
      }
    }
    STATUS {
      default="<em>Incomplete</em>"
      header="Status"
      decoratorAction {
        type=script
        command=[
          "collins.script.TagDecorators.decorateStatus"
        ]
      }
    }
    IP_ADDRESS {
      decorator="<a href=\"ssh://{value}\">{value}</a>"
      between=", "
    }
    TAG {
      header="Asset Tag"
      decoratorAction {
        type=script
        command=[
          "collins.script.TagDecorators.decorateTag"
        ]
      }
    }
    CREATED {
      header="Created"
      decoratorAction {
        type=script
        command=[
          "collins.script.TagDecorators.decorateCreated"
        ]
      }
      formatterAction {
        type=script
        command=[
          "collins.script.Formatters.humanDateFormat"
        ]
      }
    }
    UPDATED {
      header="Last Updated"
      default="<em>Never</em>"
      decoratorAction {
        type=script
        command=[
          "collins.script.TagDecorators.decorateUpdated"
        ]
      }
    }
    SL_LINK {
      header="SL Link"
      decoratorAction {
        type=script
        command=[
          "collins.script.TagDecorators.decorateSLLink"
        ]
      }
      showIfAction {
        type=script
        command=[
          "collins.script.ShowIf.showSoftLayerLink"
        ]
      }
    }
    PRIMARY_ROLE {
      header="Primary Role"
      decorator=${tagdecorators.templates.search}
      default="<em>Unknown</em>"
    }
  }
}

# Provisioner Plugin
provisioner.enabled=true
provisioner.profiles="test/resources/profiles.yaml"
provisioner.rate="1/10 seconds"
provisioner.checkCommand="/usr/bin/true"
provisioner.command="/usr/bin/true"

# Power Management Plugin
powermanagement {
  enabled = true
  command_template = "ipmitool -H <host> -U <username> -P <password> -I lan -L OPERATOR"

  commands {
    powerOff = ${powermanagement.command_template}" chassis power off"
    powerOn = ${powermanagement.command_template}" chassis power on"
    powerSoft = ${powermanagement.command_template}" chassis power soft"
    powerState = ${powermanagement.command_template}" chassis power status"
    rebootHard = ${powermanagement.command_template}" chassis power cycle"
    rebootSoft = ${powermanagement.command_template}" chassis power reset"
    identify = ${powermanagement.command_template}" chassis identify <interval>"
    verify = "ping -c 3 <host>"
  }
}

# IP Address Allocation
# Ip Address Allocation Pools
ipAddresses {
  pools {
    AAA {
      network="172.16.4.0/28"
      startAddress="172.16.4.4"
    }
    ADMIN-OPS {
      network="172.16.56.0/24"
      startAddress="172.16.56.5"
    }
    DEV {
      network="172.16.5.0/24"
      startAddress="172.16.5.4"
    }
    WEB-EDIT {
      network="172.16.64.0/24"
      startAddress="172.16.64.5"
    }
    WEB-SECURE {
      network="172.16.73.0/28"
      startAddress="172.16.73.5"
    }

  }
}

ipmi {
  randomUsername = false
  username = "root"
  passwordLength = 16
  network="172.16.32.0/20"
  startAddress="172.16.32.20"
}

lshw {
  flashProduct="flashmax"
  flashSize="1400000000000"
}

include "authentication.conf"

# Set logging properties in logger.xml or dev_logger.xml

querylog {
  enabled = false
  prefix = "QUERY: "
  includeResults = false
  frontendLogging = true
}

solr {
  enabled = true
  repopulateOnStartup = false
  useEmbeddedServer = true
  externalUrl="http://localhost:8983/solr"
  embeddedSolrHome = "conf/solr/"
}
